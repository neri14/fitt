name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Application version check
      run: |
        fitt --version

    - name: Run MyPy (type checking)
      run: |
        mypy ./fitt

    - name: Run tests with coverage
      run: |
        pytest --cov=fitt --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/fitt/
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Install package to get version
      run: |
        pip install -e .

    - name: Verify release tag matches package version
      run: |
        PACKAGE_VERSION=$(python -c "import fitt; print(f'v{fitt.__version__}')")
        RELEASE_TAG="${{ github.event.release.tag_name }}"
        RELEASE_NAME="${{ github.event.release.name }}"
        echo "Package version: $PACKAGE_VERSION"
        echo "Release tag: $RELEASE_TAG"
        echo "Release name: $RELEASE_NAME"
        if [ "$RELEASE_NAME" != "$RELEASE_TAG" ]; then
          echo "Error: Release name ($RELEASE_NAME) does not match release tag ($RELEASE_TAG)"
          exit 1
        fi
        if [ "$PACKAGE_VERSION" != "$RELEASE_TAG" ]; then
          echo "Error: Release tag ($RELEASE_TAG) does not match package version ($PACKAGE_VERSION)"
          exit 1
        fi

    - name: Build package
      run: |
        python -m build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
